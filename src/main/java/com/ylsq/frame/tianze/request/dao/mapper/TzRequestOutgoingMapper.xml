<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ylsq.frame.tianze.request.dao.mapper.TzRequestOutgoingMapper">
  <resultMap id="BaseResultMap" type="com.ylsq.frame.tianze.request.dao.model.TzRequestOutgoing">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="request_id" jdbcType="BIGINT" property="requestId" />
    <result column="strategy_id" jdbcType="BIGINT" property="strategyId" />
    <result column="file_id" jdbcType="BIGINT" property="fileId" />
    <result column="recipient" jdbcType="VARCHAR" property="recipient" />
    <result column="recipient_org" jdbcType="VARCHAR" property="recipientOrg" />
    <result column="approve_status" jdbcType="VARCHAR" property="approveStatus" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="create_user" jdbcType="VARCHAR" property="createUser" />
    <result column="rec_status" jdbcType="INTEGER" property="recStatus" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, request_id, strategy_id, file_id, recipient, recipient_org, approve_status, create_time, 
    create_user, rec_status
  </sql>
  <select id="selectByExample" parameterType="com.ylsq.frame.tianze.request.dao.model.TzRequestOutgoingExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from tz_request_outgoing
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from tz_request_outgoing
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from tz_request_outgoing
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.ylsq.frame.tianze.request.dao.model.TzRequestOutgoingExample">
    delete from tz_request_outgoing
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.ylsq.frame.tianze.request.dao.model.TzRequestOutgoing">
    insert into tz_request_outgoing (id, request_id, strategy_id, 
      file_id, recipient, recipient_org, 
      approve_status, create_time, create_user, 
      rec_status)
    values (#{id,jdbcType=BIGINT}, #{requestId,jdbcType=BIGINT}, #{strategyId,jdbcType=BIGINT}, 
      #{fileId,jdbcType=BIGINT}, #{recipient,jdbcType=VARCHAR}, #{recipientOrg,jdbcType=VARCHAR}, 
      #{approveStatus,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, #{createUser,jdbcType=VARCHAR}, 
      #{recStatus,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.ylsq.frame.tianze.request.dao.model.TzRequestOutgoing">
    insert into tz_request_outgoing
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="requestId != null">
        request_id,
      </if>
      <if test="strategyId != null">
        strategy_id,
      </if>
      <if test="fileId != null">
        file_id,
      </if>
      <if test="recipient != null">
        recipient,
      </if>
      <if test="recipientOrg != null">
        recipient_org,
      </if>
      <if test="approveStatus != null">
        approve_status,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="createUser != null">
        create_user,
      </if>
      <if test="recStatus != null">
        rec_status,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="requestId != null">
        #{requestId,jdbcType=BIGINT},
      </if>
      <if test="strategyId != null">
        #{strategyId,jdbcType=BIGINT},
      </if>
      <if test="fileId != null">
        #{fileId,jdbcType=BIGINT},
      </if>
      <if test="recipient != null">
        #{recipient,jdbcType=VARCHAR},
      </if>
      <if test="recipientOrg != null">
        #{recipientOrg,jdbcType=VARCHAR},
      </if>
      <if test="approveStatus != null">
        #{approveStatus,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createUser != null">
        #{createUser,jdbcType=VARCHAR},
      </if>
      <if test="recStatus != null">
        #{recStatus,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.ylsq.frame.tianze.request.dao.model.TzRequestOutgoingExample" resultType="java.lang.Long">
    select count(*) from tz_request_outgoing
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update tz_request_outgoing
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.requestId != null">
        request_id = #{record.requestId,jdbcType=BIGINT},
      </if>
      <if test="record.strategyId != null">
        strategy_id = #{record.strategyId,jdbcType=BIGINT},
      </if>
      <if test="record.fileId != null">
        file_id = #{record.fileId,jdbcType=BIGINT},
      </if>
      <if test="record.recipient != null">
        recipient = #{record.recipient,jdbcType=VARCHAR},
      </if>
      <if test="record.recipientOrg != null">
        recipient_org = #{record.recipientOrg,jdbcType=VARCHAR},
      </if>
      <if test="record.approveStatus != null">
        approve_status = #{record.approveStatus,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.createUser != null">
        create_user = #{record.createUser,jdbcType=VARCHAR},
      </if>
      <if test="record.recStatus != null">
        rec_status = #{record.recStatus,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update tz_request_outgoing
    set id = #{record.id,jdbcType=BIGINT},
      request_id = #{record.requestId,jdbcType=BIGINT},
      strategy_id = #{record.strategyId,jdbcType=BIGINT},
      file_id = #{record.fileId,jdbcType=BIGINT},
      recipient = #{record.recipient,jdbcType=VARCHAR},
      recipient_org = #{record.recipientOrg,jdbcType=VARCHAR},
      approve_status = #{record.approveStatus,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      create_user = #{record.createUser,jdbcType=VARCHAR},
      rec_status = #{record.recStatus,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.ylsq.frame.tianze.request.dao.model.TzRequestOutgoing">
    update tz_request_outgoing
    <set>
      <if test="requestId != null">
        request_id = #{requestId,jdbcType=BIGINT},
      </if>
      <if test="strategyId != null">
        strategy_id = #{strategyId,jdbcType=BIGINT},
      </if>
      <if test="fileId != null">
        file_id = #{fileId,jdbcType=BIGINT},
      </if>
      <if test="recipient != null">
        recipient = #{recipient,jdbcType=VARCHAR},
      </if>
      <if test="recipientOrg != null">
        recipient_org = #{recipientOrg,jdbcType=VARCHAR},
      </if>
      <if test="approveStatus != null">
        approve_status = #{approveStatus,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createUser != null">
        create_user = #{createUser,jdbcType=VARCHAR},
      </if>
      <if test="recStatus != null">
        rec_status = #{recStatus,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.ylsq.frame.tianze.request.dao.model.TzRequestOutgoing">
    update tz_request_outgoing
    set request_id = #{requestId,jdbcType=BIGINT},
      strategy_id = #{strategyId,jdbcType=BIGINT},
      file_id = #{fileId,jdbcType=BIGINT},
      recipient = #{recipient,jdbcType=VARCHAR},
      recipient_org = #{recipientOrg,jdbcType=VARCHAR},
      approve_status = #{approveStatus,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      create_user = #{createUser,jdbcType=VARCHAR},
      rec_status = #{recStatus,jdbcType=INTEGER}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <cache type="org.mybatis.caches.ehcache.LoggingEhcache" />
</mapper>